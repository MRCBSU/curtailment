axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(0.4, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))
output
des
design.details <- apply(des, 1, function(x) paste("{", x["r"], "/", x["n"], ", ", format(round(as.numeric(x["thetaF"]),2), nsmall=2), "/", format(round(as.numeric(x["thetaE"]),2), nsmall=2), "}", sep=""))
design.details
output <-  ggplot2::ggplot(weights.df, ggplot2::aes(x=w_1, y=w_0)) +
ggplot2::geom_raster(ggplot2::aes(fill = Design)) +
ggplot2::scale_fill_discrete(name="Design",labels=as.vector(design.details)) +
# ggtitle(paste(design.type, ", scenario ", scenario, sep="")) +
ggplot2::xlab(expression(w[1])) +
ggplot2::ylab(expression(w[0])) +
ggplot2::theme_bw()+
ggplot2::theme(#axis.text.x=element_text(),
legend.text=ggplot2::element_text(size=7),
plot.title = ggplot2::element_text(size = ggplot2::rel(1.4)),
axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(0.4, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))
output
best.des
str(best.des)
factor(best.des)
weights.df <- data.frame(weights.matrix, factor(best.des))
names(weights.df) <- c("w_0", "w_1", "1-w_0-w_1", "Design")
output <-  ggplot2::ggplot(weights.df, ggplot2::aes(x=w_1, y=w_0)) +
ggplot2::geom_raster(ggplot2::aes(fill = Design)) +
ggplot2::scale_fill_discrete(name="Design",labels=as.vector(design.details)) +
# ggtitle(paste(design.type, ", scenario ", scenario, sep="")) +
ggplot2::xlab(expression(w[1])) +
ggplot2::ylab(expression(w[0])) +
ggplot2::theme_bw()+
ggplot2::theme(#axis.text.x=element_text(),
legend.text=ggplot2::element_text(size=7),
plot.title = ggplot2::element_text(size = ggplot2::rel(1.4)),
axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(0.4, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))
output
output <-  ggplot2::ggplot(weights.df, ggplot2::aes(x=w_1, y=w_0)) +
ggplot2::geom_raster(ggplot2::aes(fill = Design)) +
ggplot2::scale_fill_discrete(name="Design",labels=as.vector(design.details)) +
# ggtitle(paste(design.type, ", scenario ", scenario, sep="")) +
ggplot2::xlab(expression(w[1])) +
ggplot2::ylab(expression(w[0])) +
ggplot2::theme_bw()+
ggplot2::theme(#axis.text.x=element_text(),
legend.text=ggplot2::element_text(size=7),
plot.title = ggplot2::element_text(size = ggplot2::rel(1.4)),
axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(1, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))
output
ggplot2::ggplot(weights.df, ggplot2::aes(x=w_1, y=w_0)) +
ggplot2::geom_raster(ggplot2::aes(fill = Design)) +
ggplot2::scale_fill_discrete(name="Design",labels=as.vector(design.details)) +
# ggtitle(paste(design.type, ", scenario ", scenario, sep="")) +
ggplot2::xlab(expression(w[1])) +
ggplot2::ylab(expression(w[0])) +
ggplot2::theme_bw()+
ggplot2::theme(#axis.text.x=element_text(),
legend.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
plot.title = ggplot2::element_text(size = ggplot2::rel(1.4)),
axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(1, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))
ggplot2::ggplot(weights.df, ggplot2::aes(x=w_1, y=w_0)) +
ggplot2::geom_raster(ggplot2::aes(fill = Design)) +
ggplot2::scale_fill_discrete(name="Design",labels=as.vector(design.details)) +
# ggtitle(paste(design.type, ", scenario ", scenario, sep="")) +
ggplot2::xlab(expression(w[1])) +
ggplot2::ylab(expression(w[0])) +
ggplot2::theme_bw()+
ggplot2::theme(#axis.text.x=element_text(),
legend.text=ggplot2::element_text(size=ggplot2::rel(1)),
plot.title = ggplot2::element_text(size = ggplot2::rel(1.4)),
axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(1, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))
ggplot2::ggplot(weights.df, ggplot2::aes(x=w_1, y=w_0)) +
ggplot2::geom_raster(ggplot2::aes(fill = Design)) +
ggplot2::scale_fill_discrete(name="Design",labels=as.vector(design.details)) +
# ggtitle(paste(design.type, ", scenario ", scenario, sep="")) +
ggplot2::xlab(expression(w[1])) +
ggplot2::ylab(expression(w[0])) +
ggplot2::theme_bw()+
ggplot2::theme(#axis.text.x=element_text(),
legend.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
plot.title = ggplot2::element_text(size = ggplot2::rel(1.4)),
axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(1, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))
w <- seq(0, 1, by=0.01)
weights.matrix <- expand.grid(w, w)
weights.matrix <- weights.matrix[rowSums(weights.matrix)<=1, ]
weights.matrix <- cbind(weights.matrix, 1-rowSums(weights.matrix))
weights.matrix <- weights.matrix[-1, ]
findWeights <- function(single.des, weight.mat){
current.des.ess0 <- single.des["EssH0"]
current.des.ess1 <- single.des["Ess"]
current.des.n <- single.des["n"]
vector.of.loss <- apply(weight.mat, 1, function(x) x[1]*current.des.ess0 + x[2]*current.des.ess1 + x[3]*current.des.n)
vector.of.loss
}
loss.matrix <- apply(des, 1, findWeights, weights.matrix)
# What is the best design for each weight?
best.des <- apply(loss.matrix, 1, which.min)
weights.df <- data.frame(weights.matrix, factor(best.des))
names(weights.df) <- c("w_0", "w_1", "1-w_0-w_1", "Design")
design.details <- apply(des, 1, function(x) paste("{", x["r"], "/", x["n"], ", ", format(round(as.numeric(x["thetaF"]),2), nsmall=2), "/", format(round(as.numeric(x["thetaE"]),2), nsmall=2), "}", sep=""))
output <- ggplot2::ggplot(weights.df, ggplot2::aes(x=w_1, y=w_0)) +
ggplot2::geom_raster(ggplot2::aes(fill = Design)) +
ggplot2::scale_fill_discrete(name="Design",labels=as.vector(design.details)) +
# ggtitle(paste(design.type, ", scenario ", scenario, sep="")) +
ggplot2::xlab(expression(w[1])) +
ggplot2::ylab(expression(w[0])) +
ggplot2::theme_bw()+
ggplot2::theme(#axis.text.x=element_text(),
legend.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
plot.title = ggplot2::element_text(size = ggplot2::rel(1.4)),
axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(1, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))
output
sing <- curtailment::singlearmDesign(nmin = 30, nmax = 30, C = 5:6, p0 = 0.1, p1 = 0.4, power = 0.8, alpha = 0.05)
sing
des <- sing$all.des
w <- seq(0, 1, by=0.01)
weights.matrix <- expand.grid(w, w)
weights.matrix <- weights.matrix[rowSums(weights.matrix)<=1, ]
weights.matrix <- cbind(weights.matrix, 1-rowSums(weights.matrix))
weights.matrix <- weights.matrix[-1, ]
findWeights <- function(single.des, weight.mat){
current.des.ess0 <- single.des["EssH0"]
current.des.ess1 <- single.des["Ess"]
current.des.n <- single.des["n"]
vector.of.loss <- apply(weight.mat, 1, function(x) x[1]*current.des.ess0 + x[2]*current.des.ess1 + x[3]*current.des.n)
vector.of.loss
}
loss.matrix <- apply(des, 1, findWeights, weights.matrix)
# What is the best design for each weight?
best.des <- apply(loss.matrix, 1, which.min)
weights.df <- data.frame(weights.matrix, factor(best.des))
names(weights.df) <- c("w_0", "w_1", "1-w_0-w_1", "Design")
design.details <- apply(des, 1, function(x) paste("{", x["r"], "/", x["n"], ", ", format(round(as.numeric(x["thetaF"]),2), nsmall=2), "/", format(round(as.numeric(x["thetaE"]),2), nsmall=2), "}", sep=""))
output <- ggplot2::ggplot(weights.df, ggplot2::aes(x=w_1, y=w_0)) +
ggplot2::geom_raster(ggplot2::aes(fill = Design)) +
ggplot2::scale_fill_discrete(name="Design",labels=as.vector(design.details)) +
# ggtitle(paste(design.type, ", scenario ", scenario, sep="")) +
ggplot2::xlab(expression(w[1])) +
ggplot2::ylab(expression(w[0])) +
ggplot2::theme_bw()+
ggplot2::theme(#axis.text.x=element_text(),
legend.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
plot.title = ggplot2::element_text(size = ggplot2::rel(1.4)),
axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(1, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))
output
# When you add documentation in the function file, run devtools::document() and roxygen will convert it into "real" documentation:
devtools::document()
rm(list = c("findWeights"))
# When you add documentation in the function file, run devtools::document() and roxygen will convert it into "real" documentation:
devtools::document()
sing
all.equal(c(6,6,6))
all.equal(c(6,6))
var(c(6,6,6))
split(sing$all.des, f=C)
str(sing$all.des)
class(sing$all.des)
split(sing$all.des, f=factor(C))
split(sing$all.des, f=sing$all.des$C)
?split
class(sing$all.des)
as.factor(sing$all.des$C)
as.factor(sing$all.des[,"C"])
split(sing$all.des, f=sing$all.des[,"C"])
split(sing$all.des, f=sing$all.des[,"C"], drop=F)
split(sing$all.des, f=sing$all.des[,"C"], drop=T)
as.data.frame(sing$all.des)
xx <- as.data.frame(sing$all.des)
split(xx, xx$C)
x3 <- split(xx, xx$C)
x3
class(x3)
x3
plotWeights(x3[[1]])
x3[[1]]
#' @export
plotWeightsOneCohortSize <- function(des){
w <- seq(0, 1, by=0.01)
weights.matrix <- expand.grid(w, w)
weights.matrix <- weights.matrix[rowSums(weights.matrix)<=1, ]
weights.matrix <- cbind(weights.matrix, 1-rowSums(weights.matrix))
weights.matrix <- weights.matrix[-1, ]
loss.matrix <- apply(des, 1, findWeights, weights.matrix)
# What is the best design for each weight?
best.des <- apply(loss.matrix, 1, which.min)
weights.df <- data.frame(weights.matrix, factor(best.des))
names(weights.df) <- c("w_0", "w_1", "1-w_0-w_1", "Design")
design.details <- apply(des, 1, function(x) paste("{", x["r"], "/", x["n"], ", ", format(round(as.numeric(x["thetaF"]),2), nsmall=2), "/", format(round(as.numeric(x["thetaE"]),2), nsmall=2), "}", sep=""))
output <- ggplot2::ggplot(weights.df, ggplot2::aes(x=w_1, y=w_0)) +
ggplot2::geom_raster(ggplot2::aes(fill = Design)) +
ggplot2::scale_fill_discrete(name="Design",labels=as.vector(design.details)) +
ggplot2::xlab(expression(w[1])) +
ggplot2::ylab(expression(w[0])) +
ggplot2::theme_bw()+
ggplot2::theme(#axis.text.x=element_text(),
legend.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
plot.title = ggplot2::element_text(size = ggplot2::rel(1.4)),
axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(1, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))
output
}
plotWeightsOneCohortSize(x3[[1]])
plotWeightsOneCohortSize(x3[[2]])
lapply(plotWeightsOneCohortSize(x3))
lapply(x3, plotWeightsOneCohortSize)
plotWeights <- function(main.output, split.by.cohort.size=TRUE){
if(var(main.output$all.des$C)==0 | split.by.cohort.size==FALSE){
output <- plotWeightsOneCohortSize(main.output$all.des)
}else{
des.df <- as.data.frame(main.output$all.des)
all.des.list <- split(des.df, des.df$C)
output <- lapply(all.des.list, plotWeightsOneCohortSize)
}
output
}
plotWeights(sing)
plotWeights <- function(main.output, split.by.cohort.size=TRUE){
if(var(main.output$all.des[, "C"])==0 | split.by.cohort.size==FALSE){
output <- plotWeightsOneCohortSize(main.output$all.des)
}else{
des.df <- as.data.frame(main.output$all.des)
all.des.list <- split(des.df, des.df$C)
output <- lapply(all.des.list, plotWeightsOneCohortSize)
}
output
}
plotWeights(sing)
plotWeights(sing, FALSE)
des
plotWeightsOneCohortSize <- function(des){
w <- seq(0, 1, by=0.01)
weights.matrix <- expand.grid(w, w)
weights.matrix <- weights.matrix[rowSums(weights.matrix)<=1, ]
weights.matrix <- cbind(weights.matrix, 1-rowSums(weights.matrix))
weights.matrix <- weights.matrix[-1, ]
loss.matrix <- apply(des, 1, findWeights, weights.matrix)
# What is the best design for each weight?
best.des <- apply(loss.matrix, 1, which.min)
weights.df <- data.frame(weights.matrix, factor(best.des))
names(weights.df) <- c("w_0", "w_1", "1-w_0-w_1", "Design")
design.details <- apply(des, 1, function(x) paste("{", x["r"], "/", x["n"], ", ", format(round(as.numeric(x["thetaF"]),2), nsmall=2), "/", format(round(as.numeric(x["thetaE"]),2), nsmall=2), "}", sep=""))
output <- ggplot2::ggplot(weights.df, ggplot2::aes(x=w_1, y=w_0)) +
ggplot2::geom_raster(ggplot2::aes(fill = Design)) +
ggplot2::scale_fill_discrete(name="Design",labels=as.vector(design.details)) +
ggplot2::xlab(expression(w[1])) +
ggplot2::ylab(expression(w[0])) +
ggplot2::theme_bw()+
ggplot2::ggtitle(paste("Cohort size=", des[1, "C"], ", No. of stages=", des[1, "stage"]))
ggplot2::theme(#axis.text.x=element_text(),
legend.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
plot.title = ggplot2::element_text(size = ggplot2::rel(1.4)),
axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(1, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))
output
}
#' @export
plotWeights <- function(main.output, split.by.cohort.size=TRUE){
if(var(main.output$all.des[, "C"])==0 | split.by.cohort.size==FALSE){
output <- plotWeightsOneCohortSize(main.output$all.des)
}else{
des.df <- as.data.frame(main.output$all.des)
all.des.list <- split(des.df, des.df$C)
output <- lapply(all.des.list, plotWeightsOneCohortSize)
}
output
}
plotWeights(sing)
plotWeightsOneCohortSize <- function(des){
w <- seq(0, 1, by=0.01)
weights.matrix <- expand.grid(w, w)
weights.matrix <- weights.matrix[rowSums(weights.matrix)<=1, ]
weights.matrix <- cbind(weights.matrix, 1-rowSums(weights.matrix))
weights.matrix <- weights.matrix[-1, ]
loss.matrix <- apply(des, 1, findWeights, weights.matrix)
# What is the best design for each weight?
best.des <- apply(loss.matrix, 1, which.min)
weights.df <- data.frame(weights.matrix, factor(best.des))
names(weights.df) <- c("w_0", "w_1", "1-w_0-w_1", "Design")
design.details <- apply(des, 1, function(x) paste("{", x["r"], "/", x["n"], ", ", format(round(as.numeric(x["thetaF"]),2), nsmall=2), "/", format(round(as.numeric(x["thetaE"]),2), nsmall=2), "}", sep=""))
output <- ggplot2::ggplot(weights.df, ggplot2::aes(x=w_1, y=w_0)) +
ggplot2::geom_raster(ggplot2::aes(fill = Design)) +
ggplot2::scale_fill_discrete(name="Design",labels=as.vector(design.details)) +
ggplot2::xlab(expression(w[1])) +
ggplot2::ylab(expression(w[0])) +
ggplot2::theme_bw()+
ggplot2::theme(#axis.text.x=element_text(),
legend.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
plot.title = ggplot2::element_text(size = ggplot2::rel(1.4)),
axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(1, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))+
ggplot2::ggtitle(paste("Cohort size=", des[1, "C"], ", No. of stages=", des[1, "stage"]))
output
}
#' @export
plotWeights <- function(main.output, split.by.cohort.size=TRUE){
if(var(main.output$all.des[, "C"])==0 | split.by.cohort.size==FALSE){
output <- plotWeightsOneCohortSize(main.output$all.des)
}else{
des.df <- as.data.frame(main.output$all.des)
all.des.list <- split(des.df, des.df$C)
output <- lapply(all.des.list, plotWeightsOneCohortSize)
}
output
}
plotWeights(sing)
plotWeightsOneCohortSize <- function(des){
w <- seq(0, 1, by=0.01)
weights.matrix <- expand.grid(w, w)
weights.matrix <- weights.matrix[rowSums(weights.matrix)<=1, ]
weights.matrix <- cbind(weights.matrix, 1-rowSums(weights.matrix))
weights.matrix <- weights.matrix[-1, ]
loss.matrix <- apply(des, 1, findWeights, weights.matrix)
# What is the best design for each weight?
best.des <- apply(loss.matrix, 1, which.min)
weights.df <- data.frame(weights.matrix, factor(best.des))
names(weights.df) <- c("w_0", "w_1", "1-w_0-w_1", "Design")
design.details <- apply(des, 1, function(x) paste("{", x["r"], "/", x["n"], ", ", format(round(as.numeric(x["thetaF"]),2), nsmall=2), "/", format(round(as.numeric(x["thetaE"]),2), nsmall=2), "}", sep=""))
output <- ggplot2::ggplot(weights.df, ggplot2::aes(x=w_1, y=w_0)) +
ggplot2::geom_raster(ggplot2::aes(fill = Design)) +
ggplot2::scale_fill_discrete(name="Design",labels=as.vector(design.details)) +
ggplot2::xlab(expression(w[1])) +
ggplot2::ylab(expression(w[0])) +
ggplot2::theme_bw()+
ggplot2::theme(#axis.text.x=element_text(),
legend.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
plot.title = ggplot2::element_text(size = ggplot2::rel(1.4), hjust=0.5),
axis.ticks=ggplot2::element_blank(),
axis.line=ggplot2::element_blank(),
axis.title=ggplot2::element_text(size=ggplot2::rel(1.5)),
axis.title.y=ggplot2::element_text(angle = 0, vjust=0.5),
axis.text=ggplot2::element_text(size=ggplot2::rel(1.5)),
legend.key.size = ggplot2::unit(1, "cm"),
legend.position = c(0.8,0.75),
panel.border=ggplot2::element_blank(),
panel.grid.major=ggplot2::element_line(color='#eeeeee'))+
ggplot2::ggtitle(paste("Cohort size=", des[1, "C"], ", No. of stages=", des[1, "stage"]))
output
}
#' @export
plotWeights <- function(main.output, split.by.cohort.size=TRUE){
if(var(main.output$all.des[, "C"])==0 | split.by.cohort.size==FALSE){
output <- plotWeightsOneCohortSize(main.output$all.des)
}else{
des.df <- as.data.frame(main.output$all.des)
all.des.list <- split(des.df, des.df$C)
output <- lapply(all.des.list, plotWeightsOneCohortSize)
}
output
}
plotWeights(sing)
devtools::document()
rm(list = c("plotWeights", "plotWeightsOneCohortSize"))
devtools::document()
loss
output <- singlearmDesign(nmin = 30,
nmax = 45,
C = 5,
p0 = 0.1,
p1 = 0.4,
power = 0.8,
alpha = 0.05)
#loss <-
library(curtailment)
output <- singlearmDesign(nmin = 30,
+ nmax = 45,
+ C = 5,
+ p0 = 0.1,
+ p1 = 0.4,
+ power = 0.8,
+ alpha = 0.05)
output <- singlearmDesign(nmin = 30, nmax = 45, C = 5, p0 = 0.1, p1 = 0.4, power = 0.8, alpha = 0.05)
findLossComponents
curtailment:::findLossComponents
output
output$all.des
findLossSingleDesign <- function(single.des, weight.mat){
current.des.ess0 <- single.des["EssH0"]
current.des.ess1 <- single.des["Ess"]
current.des.n <- single.des["n"]
vector.of.loss <- apply(weight.mat, 1, function(x) x[1]*current.des.ess0 + x[2]*current.des.ess1 + x[3]*current.des.n)
vector.of.loss
}
findLossSingleDesign(output$all.des[1,], c(1,0,0))
df <- data.frame(c(1,0,0))
df
df <- data.frame(1,0,0)
df
findLossSingleDesign(output$all.des[1,], df)
w0 <- 0.2
w1 <- 0.3
weight.vec <- data.frame(w0, w1, 1-w0-w1)
weight.vec
apply(weight.vec, 1, function(x) x[1]*output$all.des[1,] + x[2]*output$all.des[1,] + x[3]*output$all.des[1,])
output$all.des[1,]
findLossSingleDesign(output$all.des[1,], weight.vec)
apply(output$all.des, 1, findLossSingleDesign, weight.vec)
output
class(output$all.des)
loss
out <- apply(output$all.des, 1, findLossSingleDesign, weight.vec)
out
rank(out)
findLoss <- function(main.output, w0, w1){
weight.vec <- data.frame(w0, w1, 1-w0-w1)
loss <- apply(main.output$all.des, 1, findLossSingleDesign, weight.vec)
loss.ranked <- rank(loss)
loss.rounded <- round(loss, 1)
main.output$all.des <- cbind(main.output$all.des, loss.rounded, loss.ranked)
main.output
}
output
findLoss(output, 0.2, 0.3)
sing <- curtailment::singlearmDesign(nmin = 30, nmax = 36, C = 5:6, p0 = 0.1, p1 = 0.4, power = 0.8, alpha = 0.05)
findLoss(sing, 0.3, 0.3)
findLoss(sing, 0.1, 0.1)
